includeLibs.user_tx_hypegrid_wrapper = EXT:hype_grid/Classes/Utility/class.user_tx_hypegrid_wrapper.php

plugin.tx_hypegrid {
	common {
		enableGrid = {$plugin.tx_hypegrid.common.enableGrid}
		enableFitVids = {$plugin.tx_hypegrid.common.enableFitVids}
		enableFitText = {$plugin.tx_hypegrid.common.enableFitText}
	}

	grid {
		baseWidth = {$plugin.tx_hypegrid.grid.baseWidth}
		imageMinWidth = {$plugin.tx_hypegrid.grid.imageMinWidth}
	}
}

plugin.tx_hypegrid._CSS_DEFAULT_STYLE (
	.csc-row {
		max-width: {$plugin.tx_hypegrid.grid.baseWidth}px;
	}
)

tt_content {
	stdWrap {
		innerWrap {
			cObject {
				10 {
					default {
						20 {

							# Element Width
							100 = TEXT
							100 {
								stdWrap {
									noTrimWrap = | csc-span-||
									fieldRequired = tx_hypegrid_element_width
								}

								field = tx_hypegrid_element_width
							}

							# Image Columns
							110 = TEXT
							110 {
								stdWrap {
									noTrimWrap = | csc-columns-||
									required = 1
								}

								field = imagecols

								if {
									isGreaterThan.field = imagecols
									value = 1
								}
							}

							# Device Visibility
							120 = COA
							120 {
								10 = TEXT
								10 {
									stdWrap {
										noTrimWrap = | ||
										fieldRequired = tx_hypegrid_hide_desktop
									}

									value = csc-hide-desktop
								}

								20 = TEXT
								20 {
									stdWrap {
										noTrimWrap = | ||
										fieldRequired = tx_hypegrid_hide_tablet
									}

									value = csc-hide-tablet
								}

								30 = TEXT
								30 {
									stdWrap {
										noTrimWrap = | ||
										fieldRequired = tx_hypegrid_hide_phone
									}

									value = csc-hide-phone
								}
							}

							# Grid Row (Grid Elements)
							#110 = TEXT
							#110 {
							#	stdWrap {
							#		noTrimWrap = | ||
							#		required = 1
							#	}

							#	value = csc-row

							#	if {
							#		equals = gridelements_pi1
							#		value.field = CType
							#	}
							#}

							# Default Grid Width (Grid Elements)
							#120 = COA
							#120 {
							#	stdWrap {
							#		noTrimWrap = | csc-span-||
							#	}

							#	10 = USER
							#	10.userFunc = user_tx_hypegrid_wrapper->span

							#	if {
							#		isTrue.field = tx_gridelements_container
							#	}
							#}
						}
					}
				}
			}
		}
	}

	image {
		20 {
			imageStdWrap {
				stdWrap {
					innerWrap {
						cObject {
							20 {

								# Grid Width
								100 = TEXT
								100 {
									stdWrap {
										noTrimWrap = | csc-span-||
										fieldRequired = tx_hypegrid_image_width
									}

									field = tx_hypegrid_image_width
								}

								# Grid Margin
								110 = TEXT
								110 {
									stdWrap {
										noTrimWrap = | csc-margin-||
										fieldRequired = tx_hypegrid_image_margin
									}

									field = tx_hypegrid_image_margin
								}
							}
						}
					}
				}
			}

			rendering {
				default {
					oneImageStdWrap.dataWrap = <figure class="csc-image csc-column###CLASSES###">|</figure>
				}
			}

			imageStdWrapNoWidth < .imageStdWrap
		}
	}

	gridelements_pi1 {
		20 {
			10 {
				setup {
					default {
						columns {
							default {
								stdWrap {
									wrap {
										cObject = USER
										cObject {
											userFunc = user_tx_hypegrid_wrapper->span
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}